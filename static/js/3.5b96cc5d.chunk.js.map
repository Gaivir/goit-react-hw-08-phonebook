{"version":3,"sources":["redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","Components/ContactList/ContactList.jsx","Components/ContactForm/ContactForm.jsx","Components/Filter/Filter.jsx","views/ContactsView.js","../node_modules/shortid/lib/alphabet.js","Components/ContactList/ContactList.module.css","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","Components/ContactForm/ContactForm.module.css","Components/Filter/Filter.module.css"],"names":["dispatch","fetchContactRequest","axios","get","then","data","fetchContactSuccess","catch","error","fetchContactError","message","name","number","contact","addContactRequest","post","addContactSuccess","addContactError","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getFilter","state","contacts","filter","getLoading","loading","getVisibleContacts","createSelector","items","normalizedFilter","toLowerCase","includes","connect","contactsSelectors","onDeleteContact","id","contactsOperations","map","className","styles","list","class","onClick","ContactForm","nameInputId","shortid","generate","numberInputId","handleNameChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","formReset","formContact","this","htmlFor","formLabel","type","onChange","pattern","title","required","Component","changFilter","contactsActions","target","filterTitle","filterInput","app","width","margin","textAlign","ContactsView","fetchContacts","style","isLoadingContacts","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","characters","seed","lookup","index","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step","RegExp","replace","test"],"mappings":"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","file":"static/js/3.5b96cc5d.chunk.js","sourcesContent":["\r\nimport axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n} from './contacts-actions';\r\n\r\n\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(fetchContactRequest());\r\n\r\n    axios\r\n        .get('/contacts')\r\n        .then(({ data }) =>\r\n            dispatch(fetchContactSuccess(data)))\r\n        .catch(error => dispatch(fetchContactError(error.message)));\r\n\r\n}\r\n\r\nconst formSubmitHandler = (name, number) => dispatch => {\r\n    const contact = {\r\n        name,\r\n        number,\r\n    };\r\n\r\n    dispatch(addContactRequest());\r\n        \r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) =>\r\n            dispatch(addContactSuccess(data)),)\r\n        .catch(error => dispatch(addContactError(error.message)));\r\n        \r\n};\r\n\r\nconst onDeleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios\r\n        .delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(deleteContactSuccess(contactId)))\r\n        .catch(error => dispatch(deleteContactError(error.message)));\r\n}\r\n\r\n\r\nexport default {\r\n    fetchContacts,\r\n    formSubmitHandler,\r\n    onDeleteContact,\r\n}","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n\r\nconst getVisibleContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n\r\n        return contacts.filter(({ name }) =>\r\n        name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n    },\r\n);\r\n\r\n\r\nexport default {\r\n    getLoading,\r\n    getFilter,\r\n    getVisibleContacts,\r\n};\r\n\r\n\r\n\r\n// const getVisibleContacts = state => {\r\n//     const contacts = getAllContacts(state);\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter = filter.toLowerCase();\r\n\r\n//     return contacts.filter(({ name }) =>\r\n//         name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n ","\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport styles from './ContactList.module.css';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n    contacts.map(({ id, name, number }) => (\r\n        <ul>\r\n            <li key={id} className={styles.list}>{name}: {number}\r\n          <button class='btn btn-primary' onClick={() => onDeleteContact(id)}>Delete</button>\r\n          </li>\r\n        </ul> \r\n    ))\r\n);\r\n\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\n  \r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\nonDeleteContact: (id) => dispatch(contactsOperations.onDeleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport shortid from 'shortid';\r\nimport styles from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n\r\n   nameInputId = shortid.generate();\r\n    numberInputId = shortid.generate();\r\n\r\n    handleNameChange = event => {\r\n    // console.log(event.currentTarget.value);\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({ [name] : value });\r\n    };\r\n    \r\n\r\n     handleSubmit = event => {\r\n         const { name, number } = this.state;\r\n        event.preventDefault();\r\n         this.props.onSubmit(name, number);\r\n         this.formReset();\r\n        //  console.log(this.props.contacts);\r\n\r\n\r\n        //    const { name, number } = this.state;\r\n        // const { contacts } = this.props;\r\n        // event.preventDefault();\r\n        \r\n        // if (contacts.find((item) => item.name.toLowerCase() === name.toLowerCase())) {\r\n        //     alert(`${name} is already in contacts.`);\r\n        //     return {name: '', number: ''};\r\n        // } \r\n\r\n        // this.props.onSubmit(name, number);\r\n        //     this.formReset();\r\n        \r\n    }\r\n    \r\n\r\n\r\n    formReset = () => {\r\n        this.setState({\r\n            name: '',\r\n            number: '',\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n                <form className={styles.formContact} onSubmit={this.handleSubmit}>\r\n          <label htmlFor={ this.nameInputId} className={styles.formLabel}>Name\r\n                    <input\r\n                        type='text'\r\n                        name='name'\r\n                        value={this.state.name}\r\n                        onChange={this.handleNameChange}\r\n                        id={this.nameInputId}\r\n                    />\r\n                    </label>\r\n                    \r\n              \r\n                <label htmlFor={ this.numberInputId} className={styles.formLabel}>Number\r\n                    <input\r\n                        type='tel'\r\n                    name='number'\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержат ь пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                        value={this.state.number}\r\n                        onChange={this.handleNameChange}\r\n                        id={this.numberInputId}\r\n                    />\r\n                </label>\r\n                \r\n                <button type='submit'>Add contacts</button>\r\n          \r\n        </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n// const mapStateToProps = (state) => ({\r\n//      contacts: state.contact.contacts,\r\n// })\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name,number) => dispatch (contactsOperations.formSubmitHandler(name,number)),\r\n})\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","// import styles from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport styles from './Filter.module.css';\r\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\nconst Filter = ({value, changFilter}) => (\r\n    <label className={styles.filter}>\r\n        <p className={styles.filterTitle}>Find contacts by name</p>\r\n        <input type=\"text\" value={value}\r\n            onChange={changFilter}\r\n        className={styles.filterInput}/>\r\n\r\n    </label>\r\n)\r\n\r\nconst mapStateToProps = (state) => ({\r\n    value: contactsSelectors.getFilter(state),\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    changFilter: (event) => dispatch(contactsActions.onChangeFilter(event.target.value)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps )(Filter);","import { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport ContactList from '../Components/ContactList/ContactList';\r\nimport ContactForm from '../Components/ContactForm/ContactForm';\r\nimport Filter from '../Components/Filter/Filter';\r\nimport contactsOperations from '../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../redux/contacts/contacts-selectors';\r\n\r\nconst styles = {\r\n  app: {\r\n    width: 500,\r\n    margin: 'auto',\r\n    textAlign: 'left',\r\n   \r\n  }\r\n}\r\n\r\nclass ContactsView  extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n \r\n  render() {\r\n\r\n  return (   \r\n  <div style = {styles.app}>\r\n  <h1>Phonebook</h1>\r\n  <ContactForm />\r\n\r\n  <h2>Contacts</h2>\r\n  <Filter/>\r\n      <ContactList />\r\n      \r\n      {this.props.isLoadingContacts && <h1>Загружаем...</h1>}\r\n      \r\n</div>)\r\n\r\n\r\n} \r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (ContactsView );\r\n\r\n\r\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1eR0v\"};","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContact\":\"ContactForm_formContact__DlZR2\",\"formLabel\":\"ContactForm_formLabel__2eisN\",\"formInput\":\"ContactForm_formInput__2FpW0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__2WVmS\",\"filterInput\":\"Filter_filterInput__2hKMc\",\"filterTitle\":\"Filter_filterTitle__nmW--\"};"],"sourceRoot":""}